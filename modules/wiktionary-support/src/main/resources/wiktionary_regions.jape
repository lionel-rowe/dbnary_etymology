/*
* Blexisma Wiktionary Extractor
*
*/

Phase:	markup
Input: SpaceToken WStructureToken 
Options: control = all

// =============== DÃ©finitions =========================

Macro: NEWLINE
(
  {SpaceToken.string == "\n"} |
  {SpaceToken.string=="\n\r"} |
  ({SpaceToken.string=="\n"}{SpaceToken.string=="\r"}) |
  {SpaceToken.string=="\r\n"} |
  ({SpaceToken.string=="\r"}{SpaceToken.string=="\n"})
)

Rule: WiktionaryDefinitions
(
  {WStructureToken.kind=="nl1"}
  (({!SpaceToken.string == "\n", !SpaceToken.string == "\r", !SpaceToken.string == "\r\n", !SpaceToken.string == "\n\r" })*):def
  (NEWLINE):nl
)
-->
:def{
  // I must use java here as the :def biding does not extends
  gate.AnnotationSet nlset = (gate.AnnotationSet)bindings.get("nl");
  gate.AnnotationSet defset = (gate.AnnotationSet)bindings.get("def");
  if(defset != null && defset.size() != 0){
    gate.FeatureMap features = Factory.newFeatureMap();
    features.put("kind", "def");
    try {
    outputAS.add(defset.firstNode().getOffset(), nlset.firstNode().getOffset(), "WDefinition", features);
    } catch (InvalidOffsetException e) {
      e.printStackTrace();
    }
  }
}

Macro: SECTION
(
  {WStructureToken.kind=="t2"}
)


Rule: section
(
  SECTION 
  ({!SpaceToken.string == "\n", !SpaceToken.string == "\r", !SpaceToken.string == "\r\n", !SpaceToken.string == "\n\r" })*
  SECTION 
)
:macro
-->
:macro.WSection = {kind = "section"}
